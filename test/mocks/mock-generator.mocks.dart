// Mocks generated by Mockito 5.3.0 from annotations
// in terrific_venture_assessment/test/mocks/mock-generator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:terrific_venture_assessment/auth_feature/2-domain/2.1-entities/user.dart'
    as _i6;
import 'package:terrific_venture_assessment/auth_feature/2-domain/2.3-repository/aut-repository.dart'
    as _i3;
import 'package:terrific_venture_assessment/core/errors/failures/failures.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failures, _i6.User>> login(
          {String? number, int? otp}) =>
      (super.noSuchMethod(
              Invocation.method(#login, [], {#number: number, #otp: otp}),
              returnValue: _i4.Future<_i2.Either<_i5.Failures, _i6.User>>.value(
                  _FakeEither_0<_i5.Failures, _i6.User>(
                      this,
                      Invocation.method(
                          #login, [], {#number: number, #otp: otp}))))
          as _i4.Future<_i2.Either<_i5.Failures, _i6.User>>);
  @override
  _i4.Future<String> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: _i4.Future<String>.value('')) as _i4.Future<String>);
}
